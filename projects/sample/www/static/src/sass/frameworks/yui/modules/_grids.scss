// This is a port of YUI Grids version 2.6.0
// Note: This is not really tested yet. Use at your own risk.

@import "compass/utilities/general/float.sass";
@import "fonts.sass";

@mixin yui-grids {
  @include yui-grids-init;
  @include yui-grid-templates;
  @include yui-grid-divisions; }

@mixin yui-grid-templates {
  #doc {
    @include yui-document(750px); }
  #doc2 {
    @include yui-document(950px); }
  #doc3 {
    @include yui-document(fluid); }
  #doc4 {
    @include yui-document(974px); }
  /* Section: Preset Template Rules (.yui-t[1-6]) */
  .yui-t1 {
    @include yui-two-column-left-template(160px); }
  .yui-t2 {
    @include yui-two-column-left-template(180px); }
  .yui-t3 {
    @include yui-two-column-left-template(300px); }
  .yui-t4 {
    @include yui-two-column-right-template(180px); }
  .yui-t5 {
    @include yui-two-column-right-template(240px); }
  .yui-t6 {
    @include yui-two-column-right-template(300px); }
  .yui-t7 {
    @include yui-one-column-template; } }

@mixin yui-group-clearing {
  zoom: 1;
  &:after {
    content: ".";
    display: block;
    height: 0;
    clear: both;
    visibility: hidden; } }

@mixin yui-grids-init($header: "#hd", $footer: "#ft", $body: "#bd") {
  /* Section: General Rules */
  body {
    text-align: center; }
  @if $header {
    #{$header} {
      @include yui-group-clearing; } }
  @if $footer {
    #{$footer} {
      @include yui-group-clearing; } }
  @if $body {
    #{$body} {
      @include yui-group-clearing; } } }

@mixin em-size($style, $px-size, $base-font-size: $yui-default-base-font-size) {
  #{$style}: 1em * $px-size / $base-font-size; }

@mixin em-size-hacked($style, $px-size, $base-font-size: $yui-default-base-font-size) {
  @include em-size($style, $px-size, $base-font-size);
  @include em-size("*#{$style}", $px-size * 39 / 40, $base-font-size); }

// All documents must have these styles
@mixin yui-document-base($min-width: false) {
  margin: auto;
  text-align: left;
  @if $min-width {
    min-width: $min-width; } }

@mixin yui-block-base {
  position: relative;
  _position: static; }

@mixin yui-main-block {
  float: none;
  width: auto; }

// Creates a fixed width document container
// Pass "fluid" for the width to create a document that grows with the width of the browser.
@mixin yui-document($width, $min-width: false, $base-font-size: $yui-default-base-font-size) {
  @include yui-document-base($min-width);
  @if $width == "fluid" {
    margin: auto 10px;
    width: auto; }
  @else {
    @include em-size-hacked(width, $width, $base-font-size); } }

@mixin yui-two-column-left-template($column-width, $main-selector: "#yui-main", $block-selector: ".yui-b", $document-width: 750px, $min-width: false, $base-font-size: $yui-default-base-font-size) {
  @include yui-document($document-width, $min-width, $base-font-size);
  #{$block-selector} {
    @include yui-block-base;
    float: left;
    @include em-size-hacked(width, $column-width, $base-font-size); }
  #{$main-selector} {
    width: 100%;
    float: right;
    margin-left: -25em;
    #{$block-selector} {
      @include yui-main-block;
      @include em-size(margin-left, $column-width + 13px, $base-font-size);
      // t3 is 15px for IE for some reason - seems like this should be some formula based on the column width and not a fixed number - need to do more research
      @if $column-width > 180px {
        @include em-size("*margin-left", ($column-width + 15px) * 39 / 40, $base-font-size); }
      @else {
        @include em-size("*margin-left", ($column-width + 14px) * 39 / 40, $base-font-size); } } } }

@mixin yui-two-column-right-template($column-width, $main-selector: "#yui-main", $block-selector: ".yui-b", $document-width: 750px, $min-width: false, $base-font-size: $yui-default-base-font-size) {
  @include yui-document($document-width, $min-width, $base-font-size);
  #{$block-selector} {
    @include yui-block-base;
    float: right;
    @include em-size-hacked(width, $column-width, $base-font-size); }
  #{$main-selector} {
    width: 100%;
    float: left;
    margin-right: -25em;
    #{$block-selector} {
      @include yui-main-block;
      @include em-size(margin-right, $column-width + 13px, $base-font-size);
      // t5 is 15px for IE for some reason - seems like this should be some formula based on the column width and not a fixed number - need to do more research
      @if $column-width > 180px {
        @include em-size("*margin-right", ($column-width + 15px) * 39 / 40, $base-font-size); }
      @else {
        @include em-size("*margin-right", ($column-width + 14px) * 39 / 40, $base-font-size); } } } }

@mixin yui-one-column-template($main-selector: "#yui-main", $block-selector: ".yui-b", $document-width: 750px, $min-width: false, $base-font-size: $yui-default-base-font-size) {
  @include yui-document($document-width, $min-width, $base-font-size);
  #{$main-selector} {
    #{$block-selector} {
      @include yui-main-block;
      display: block;
      margin: 0 0 1em 0; } } }

@mixin yui-custom-template($main-selector: "#yui-main", $block-selector: ".yui-b") {
  #{$block-selector} {
    @include yui-block-base; }
  #{$main-selector} {
    width: 100%;
    #{$block-selector} {
      @include yui-main-block; } } }

@mixin yui-grid-divisions($unit: ".yui-u", $g-50-50: ".yui-g", $g-33-33-33: ".yui-gb", $g-67-33: ".yui-gc", $g-33-67: ".yui-gd", $g-75-25: ".yui-ge", $g-25-75: ".yui-gf") {
  /* Section: Grids and Nesting Grids */
  /* from #yui-main, .yui-g .yui-u .yui-g */
  #{nest($g-50-50, $unit, $g-50-50)} {
    width: 100%; }
  /* Children generally take half the available space */
  #{nest($g-33-33-33, $unit)},
  #{nest($g-50-50, $g-33-33-33, $unit)},
  #{nest($g-33-33-33, $g-50-50)},
  #{nest($g-33-33-33, $g-33-33-33)},
  #{nest($g-33-33-33, $g-67-33)},
  #{nest($g-33-33-33, $g-33-67)},
  #{nest($g-33-33-33, $g-75-25)},
  #{nest($g-33-33-33, $g-25-75)},
  #{nest($g-67-33, $unit)},
  #{nest($g-67-33, $g-50-50)},
  #{nest($g-33-67, $unit)} {
    float: left; }
  /* Float units (and sub grids) to the right */
  #{nest($g-50-50, $unit)},
  #{nest($g-50-50, $g-50-50)},
  #{nest($g-50-50, $g-33-33-33)},
  #{nest($g-50-50, $g-67-33)},
  #{nest($g-50-50, $g-33-67)},
  #{nest($g-50-50, $g-75-25)},
  #{nest($g-50-50, $g-25-75)},
  #{nest($g-67-33, $unit)},
  #{nest($g-33-67, $g-50-50)},
  #{nest($g-50-50, $g-67-33, $unit)},
  #{nest($g-75-25, $unit)},
  #{nest($g-75-25, $g-50-50)},
  #{nest($g-25-75, $g-50-50)},
  #{nest($g-25-75, $unit)} {
    float: right; }
  /* Float units (and sub grids) to the left */
  #{$g-50-50},
  #{$g-33-33-33},
  #{$g-67-33},
  #{$g-33-67},
  #{$g-75-25},
  #{$g-25-75},
  #{nest($g-50-50, $g-67-33)},
  #{nest($g-50-50, $g-75-25)},
  #{nest($g-67-33, "div.first")} {
    div.first {
      float: left; } }
  #{$g-50-50} {
    #{$unit},
    #{$g-50-50},
    #{$g-33-33-33},
    #{$g-67-33},
    #{$g-33-67},
    #{$g-75-25},
    #{$g-25-75} {
      width: 49.1%; } }
  #{nest($g-33-33-33, $unit)},
  #{nest($g-50-50, $g-33-33-33, $unit)},
  #{nest($g-33-33-33, $g-50-50)},
  #{nest($g-33-33-33, $g-33-33-33)},
  #{nest($g-33-33-33, $g-67-33)},
  #{nest($g-33-33-33, $g-33-67)},
  #{nest($g-33-33-33, $g-75-25)},
  #{nest($g-33-33-33, $g-25-75)},
  #{nest($g-67-33, $unit)},
  #{nest($g-67-33, $g-50-50)},
  #{nest($g-33-67, $unit)} {
    width: 32%;
    margin-left: 1.99%; }
  /* Give IE some extra breathing room for 1/3-based rounding issues */
  #{nest($g-33-33-33, $unit)} {
    *margin-left: 1.9%;
    *width: 31.9%; }
  #{nest($g-50-50, $g-33-33-33)},
  #{$g-33-33-33},
  #{$g-67-33},
  #{$g-33-67} {
    div.first {
      margin-left: 0; } }
  /* Section: Deep Nesting */
  #{$g-50-50},
  #{$g-33-33-33},
  #{$g-67-33},
  #{$g-33-67},
  #{$g-75-25},
  #{$g-25-75} {
    #{$g-50-50} {
      #{$unit} {
        width: 49%;
        *width: 48.1%;
        *margin-left: 0; } } }
  #{nest($g-50-50, $g-50-50, $unit)} {
    width: 48.1%; }
  #{$g-50-50},
  #{$g-33-33-33} {
    #{$g-33-33-33} {
      div.first {
        *margin-right: 0;
        *width: 32%;
        _width: 31.7%; } } }
  #{nest($g-50-50, $g-67-33, "div.first")},
  #{nest($g-67-33, "div.first")},
  #{nest($g-33-67, $g-50-50)},
  #{nest($g-33-67, $unit)} {
    width: 66%; }
  #{nest($g-33-33-33, $g-50-50, "div.first")} {
    *margin-right: 4%;
    _margin-right: 1.3%; }
  #{$g-33-33-33} {
    #{$g-67-33},
    #{$g-33-67} {
      div.first {
        *margin-right: 0; } } }
  #{$g-33-33-33} {
    #{$g-33-33-33},
    #{$g-67-33} {
      #{$unit} {
        *margin-left: 1.8%;
        _margin-left: 4%; } } }
  #{nest($g-50-50, $g-33-33-33, $unit)} {
    _margin-left: 1%; }
  #{nest($g-33-33-33, $g-33-67, $unit)} {
    *width: 66%;
    _width: 61.2%; }
  #{nest($g-33-33-33, $g-33-67, "div.first")} {
    *width: 31%;
    _width: 29.5%; }
  #{$g-50-50},
  #{$g-33-33-33} {
    #{$g-67-33} {
      #{$unit} {
        width: 32%;
        _float: right;
        margin-right: 0;
        _margin-left: 0; } } }
  #{nest($g-33-33-33, $g-67-33, "div.first")} {
    width: 66%;
    *float: left;
    *margin-left: 0; }
  #{$g-33-33-33} {
    #{$g-75-25},
    #{$g-25-75} {
      #{$unit} {
        margin: 0; } } }
  #{nest($g-33-33-33, $g-33-33-33, $unit)} {
    _margin-left: 0.7%; }
  #{nest($g-33-33-33, $g-50-50)},
  #{nest($g-33-33-33, $g-33-33-33)} {
    div.first {
      *margin-left: 0; } }
  #{$g-67-33},
  #{$g-33-67} {
    #{$g-50-50} {
      #{$unit} {
        *width: 48.1%;
        *margin-left: 0; } } }
  #{$g-33-67},
  #{nest($g-33-33-33, $g-33-67)} {
    div.first {
      width: 32%; } }
  #{nest($g-50-50, $g-33-67, "div.first")} {
    _width: 29.9%; }
  #{nest($g-75-25, $unit)},
  #{nest($g-75-25, $g-50-50)},
  #{nest($g-25-75, "div.first")} {
    width: 24%; }
  #{nest($g-75-25, "div.first")},
  #{nest($g-25-75, $g-50-50)},
  #{nest($g-25-75, $unit)} {
    width: 74.2%; }
  #{$g-33-33-33} {
    #{$g-75-25},
    #{$g-25-75} {
      div#{$unit} {
        float: right; } } }
  #{$g-33-33-33} {
    #{$g-75-25},
    #{$g-25-75} {
      div.first {
        float: left; } } }
  /* Width Accommodation for Nested Contexts */
  #{$g-33-33-33} {
    #{nest($g-75-25, $unit)},
    #{nest($g-25-75, "div.first")} {
      *width: 24%;
      _width: 20%; } }
  /* Width Accommodation for Nested Contexts */
  #{$g-33-33-33} {
    #{nest($g-75-25, "div.first")},
    #{nest($g-25-75, $unit)} {
      *width: 73.5%;
      _width: 65.5%; } }
  /* Patch for GD within GE */
  #{nest($g-75-25, "div.first", $g-33-67, $unit)} {
    width: 65%; }
  #{nest($g-75-25, "div.first", $g-33-67, "div.first")} {
    width: 32%; }
  /* @group Clearing */
  #{$g-50-50},
  #{$g-33-33-33},
  #{$g-67-33},
  #{$g-33-67},
  #{$g-75-25},
  #{$g-25-75} {
    @include yui-group-clearing; } }
